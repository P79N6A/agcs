<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd"
    default-autowire="byName" default-lazy-init="false">
    
	<!-- c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassmysql}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrlmysql}" />
		<property name="user" value="${jdbc.usermysql}" />
		<property name="password" value="${jdbc.passwordmysql}" />
		
		<property name="minPoolSize" value="${jdbc.minPoolSize}"/><!-- default : 3 连接池保持的最小连接数，后面的maxIdleTimeExcessConnections跟这个配合使用来减轻连接池的负载 -->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/><!-- default : 15 连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大 -->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/><!-- default : 0 单位 s 连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接,如果为0，则永远不会断开连接 -->
        <property name="maxIdleTimeExcessConnections" value="${jdbc.maxIdleTimeExcessConnections}"/><!-- 当连接池在负载之下时，最小化被C3P0连接池拥有的连接数目.想要在峰值之后，他们的连接池快速释放不必要的连接。你能通过设置maxIdleTimeExcessConnections为一个比maxIdleTime短的值，如果连接超过了特定的时间，强迫连接在你设置的最小值之后释放它 -->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/><!-- default : 3 连接池初始化时创建的连接数 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/><!-- default : 3 连接池在无空闲连接可用时一次性创建的新数据库连接数 -->
        
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/><!-- default : 0 每60秒检查所有连接池中的空闲连接。-->
        <property name="preferredTestQuery" value="select 1"/><!-- default : null 定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：测试的表必须在初始数据源的时候就存在。Default: null-->
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"/><!-- default : false 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。 -->
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/><!-- default : false 如果设为true那么在取得连接的同时将校验连接的有效性。 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/><!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"/><!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
	</bean>
    
    <!-- 集成hibernate -->  
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
	    <property name="dataSource" ref="dataSource" />
	    <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">30</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>org.agcs.system.web.entity</value>
				<value>org.agcs.services.join.entity</value>
				<value>org.agcs.services.api.goods.entity</value>
				<value>org.agcs.services.api.finance.entity</value>
				<value>org.agcs.services.api.member.entity</value>
				<value>org.agcs.sms.core.entity</value>
				<value>org.agcs.services.api.market.entity</value>
				<value>org.agcs.services.api.order.entity</value>
				<value>org.agcs.market.services.api.entity</value>
			</list>
		</property>
	</bean>
	
	<!-- 定义jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg><ref bean="dataSource"/></constructor-arg> 
    </bean>
	
	<!-- 配置事物管理器，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 事务拦截器 -->
	<!-- <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="sessionFactory" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
				
				
				PROPAGATION_REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
				PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。 
				PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。 
				PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。 
				PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
				PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。 
				PROPAGATION_NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作
				
			</props>
		</property>
	</bean>
	
	事物代理器
	<bean id="proxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>userService</value>
			</list>
		</property>
	</bean> -->
	
        
</beans>